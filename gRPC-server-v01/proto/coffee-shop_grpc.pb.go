// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CoffeShopClient is the client API for CoffeShop service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CoffeShopClient interface {
	// rpc getmenu
	GetMenu(ctx context.Context, in *MenuRequest, opts ...grpc.CallOption) (CoffeShop_GetMenuClient, error)
	// rpc placeorder
	PlaceOrder(ctx context.Context, in *Order, opts ...grpc.CallOption) (*Receipt, error)
	// rpc getorderstatus
	GetOrderStatus(ctx context.Context, in *Receipt, opts ...grpc.CallOption) (*OrderStatus, error)
}

type coffeShopClient struct {
	cc grpc.ClientConnInterface
}

func NewCoffeShopClient(cc grpc.ClientConnInterface) CoffeShopClient {
	return &coffeShopClient{cc}
}

func (c *coffeShopClient) GetMenu(ctx context.Context, in *MenuRequest, opts ...grpc.CallOption) (CoffeShop_GetMenuClient, error) {
	stream, err := c.cc.NewStream(ctx, &CoffeShop_ServiceDesc.Streams[0], "/coffeeshop.CoffeShop/GetMenu", opts...)
	if err != nil {
		return nil, err
	}
	x := &coffeShopGetMenuClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type CoffeShop_GetMenuClient interface {
	Recv() (*Menu, error)
	grpc.ClientStream
}

type coffeShopGetMenuClient struct {
	grpc.ClientStream
}

func (x *coffeShopGetMenuClient) Recv() (*Menu, error) {
	m := new(Menu)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *coffeShopClient) PlaceOrder(ctx context.Context, in *Order, opts ...grpc.CallOption) (*Receipt, error) {
	out := new(Receipt)
	err := c.cc.Invoke(ctx, "/coffeeshop.CoffeShop/PlaceOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coffeShopClient) GetOrderStatus(ctx context.Context, in *Receipt, opts ...grpc.CallOption) (*OrderStatus, error) {
	out := new(OrderStatus)
	err := c.cc.Invoke(ctx, "/coffeeshop.CoffeShop/GetOrderStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CoffeShopServer is the server API for CoffeShop service.
// All implementations must embed UnimplementedCoffeShopServer
// for forward compatibility
type CoffeShopServer interface {
	// rpc getmenu
	GetMenu(*MenuRequest, CoffeShop_GetMenuServer) error
	// rpc placeorder
	PlaceOrder(context.Context, *Order) (*Receipt, error)
	// rpc getorderstatus
	GetOrderStatus(context.Context, *Receipt) (*OrderStatus, error)
	mustEmbedUnimplementedCoffeShopServer()
}

// UnimplementedCoffeShopServer must be embedded to have forward compatible implementations.
type UnimplementedCoffeShopServer struct {
}

func (UnimplementedCoffeShopServer) GetMenu(*MenuRequest, CoffeShop_GetMenuServer) error {
	return status.Errorf(codes.Unimplemented, "method GetMenu not implemented")
}
func (UnimplementedCoffeShopServer) PlaceOrder(context.Context, *Order) (*Receipt, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PlaceOrder not implemented")
}
func (UnimplementedCoffeShopServer) GetOrderStatus(context.Context, *Receipt) (*OrderStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrderStatus not implemented")
}
func (UnimplementedCoffeShopServer) mustEmbedUnimplementedCoffeShopServer() {}

// UnsafeCoffeShopServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CoffeShopServer will
// result in compilation errors.
type UnsafeCoffeShopServer interface {
	mustEmbedUnimplementedCoffeShopServer()
}

func RegisterCoffeShopServer(s grpc.ServiceRegistrar, srv CoffeShopServer) {
	s.RegisterService(&CoffeShop_ServiceDesc, srv)
}

func _CoffeShop_GetMenu_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(MenuRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CoffeShopServer).GetMenu(m, &coffeShopGetMenuServer{stream})
}

type CoffeShop_GetMenuServer interface {
	Send(*Menu) error
	grpc.ServerStream
}

type coffeShopGetMenuServer struct {
	grpc.ServerStream
}

func (x *coffeShopGetMenuServer) Send(m *Menu) error {
	return x.ServerStream.SendMsg(m)
}

func _CoffeShop_PlaceOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Order)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoffeShopServer).PlaceOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/coffeeshop.CoffeShop/PlaceOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoffeShopServer).PlaceOrder(ctx, req.(*Order))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoffeShop_GetOrderStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Receipt)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoffeShopServer).GetOrderStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/coffeeshop.CoffeShop/GetOrderStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoffeShopServer).GetOrderStatus(ctx, req.(*Receipt))
	}
	return interceptor(ctx, in, info, handler)
}

// CoffeShop_ServiceDesc is the grpc.ServiceDesc for CoffeShop service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CoffeShop_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "coffeeshop.CoffeShop",
	HandlerType: (*CoffeShopServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PlaceOrder",
			Handler:    _CoffeShop_PlaceOrder_Handler,
		},
		{
			MethodName: "GetOrderStatus",
			Handler:    _CoffeShop_GetOrderStatus_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetMenu",
			Handler:       _CoffeShop_GetMenu_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "coffee-shop.proto",
}
