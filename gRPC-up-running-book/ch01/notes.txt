1. Microservices architecture is about building a software application
as a collection of independent, autonomous (developed, deployed,
and scaled independently), business capability–oriented, and
loosely coupled services.

2. Inter-process communications are usually implemented using message passing with a
synchronous request-response style or asynchronous event-driven styles. In the syn‐
chronous communication style, the client process sends a request message to the
server process over the network and waits for a response message.

3. In asynchronous event-driven messaging, processes communicate with asynchronous message
passing by using an intermediary known as an event broker. Depending on your business use
case, you can select the communication pattern that you want to implement.

4. gRPC is an interprocess communication technology that allows you to connect, invoke,
operate, and debug distributed heterogeneous applications as easily as making a local function call.

5. When you develop a gRPC application the first thing that you do is define a service
interface.
    - The service interface definition contains information on how your service
    can be consumed by consumers.
    - what methods you allow the consumers to call remotely.
    - what method parameters and message formats to use when invoking those
    methods.
    - The language that we specify in the service definition is known
    as an interface definition language (IDL).

6. Using that service definition:
    - you can generate the server-side code known as a server
    skeleton, which simplifies the server-side logic by providing low-level communication
    abstractions.
    - you can generate the client-side code, known as a client stub,
    which simplifies the client-side communication with abstractions to hide low-level
    communication for different programming languages.

7. gRPC uses protocol buffers as the IDL to define the service interface. Protocol buffers
are a language-agnostic, platform-neutral, extensible mechanism to serializing struc‐
tured data.

8. On the server side, the server implements that service definition and runs a gRPC
server to handle client calls. Therefore, on the server side, to make the ProductInfo
service do its job you need to do the following:
    1. Implement the service logic of the generated service skeleton by overriding the
    service base class.
    2. Run a gRPC server to listen for requests from clients and return the service
    responses.

9. Marshaling is the process of packing parameters and a remote function into a message
packet that is sent over the network,
while unmarshaling unpacks the message packet into the respective method invocation.

10. RPC was a popular inter-process communication technique for building client-
service applications. With RPC a client can remotely invoke a function of a method
just like calling a local method.

11. SOAP is the standard communication technique in a service-oriented architecture (SOA) to exchange XML-based structured data between services (usually called web services in the context of SOA) and communicates over any underlying communication protocol such as HTTP (most commonly used).
